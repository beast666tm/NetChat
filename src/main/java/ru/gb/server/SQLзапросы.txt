~\IdeaProjects\Java3\NetChat\ HOME_DIRECTORY_OF_[NetChat]

********************************************************************************


select * from users;
select * from users where login = 'login3';
select * from users where id = 1 or login = 'login3';
select * from users where password = '123';
select * from users where nick = 'Даздраперма';

insert into users (login, nick, password) values ('login1', 'nick1', '123');
insert into users (login, nick, password) values ('login2', 'nick2', '123');
insert into users (login, nick, password) values ('login3', 'nick3', '123');

update users set password = '321' where nick = 'Даздраперма';

*************************************************************************

package ru.gb.server;

import java.sql.*;

public class ServerRunner {

    private Connection connection;
    private Statement statement;

    public static void main(String[] args) {
        new ChatServer().run();
    }

//    public void connect() throws SQLException {
//        connection = DriverManager.getConnection("jdbc:sqlite:users1.db");  // sqlite
//        statement = connection.createStatement();
//    }

    public void connect() throws SQLException {
        connection = DriverManager.getConnection("jdbc:sqlite:users1.db");
        statement = connection.createStatement();
    }

    public void disconnect() throws SQLException {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }finally {
                connection.close();
            }
        }

    }

    public void createTable() throws SQLException {
        statement.executeUpdate("" +
                "create table if not exists users(" +
                " id integer primary key autoincrement," +
                " login text," +
                " nick text," +
                " password text" +
                ")" +
                "");
    }
}

********************************************************************


package ru.gb.server;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class SimpleAuthService /*implements AuthService */{
    private Connection connection;
    private Statement statement;
    final SimpleAuthService sas = new SimpleAuthService();

    {
        try {
            sas.connect();
        } finally {
            sas.disconnect();
        }
    }

    @Override
    public void connect() {
        connection = DriverManager.getConnection("jdbc:sqlite:users.db");
    }

    @Override
    public void disconnect() {

    }


    private final List<UserData> users;

    public SimpleAuthService() {
        users = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            users.add(new UserData("login" + i, "pass" + i, "nick" + i));
        }
    }

    @Override
    public String getNickByLoginAndPassword(String login, String password) {
        for (UserData user : users) {
            if (user.login.equals(login) && user.password.equals(password)) {
                return user.nick;
            }
        }
        return null;
    }

    private static class UserData {
        private final String login;
        private final String password;
        private final String nick;

        public UserData(String login, String password, String nick) {
            this.login = login;
            this.password = password;
            this.nick = nick;
        }
    }

}


************************************************************************************



package ru.gb.server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

public class ChatServer {

    private final AuthService authService;
    private final Map<String, ClientHandler> clients;

    public ChatServer() {
        this.authService = new SimpleAuthService();
        this.clients = new HashMap<>();
    }

    public void run() {
        try (ServerSocket serverSocket = new ServerSocket(8189)) {
            while (true) {
                System.out.println("Wait client connection...");
                final Socket socket = serverSocket.accept();
                new ClientHandler(socket, this);
                System.out.println("Client connected");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public AuthService getAuthService() {
        return authService;
    }

    public boolean isNickBusy(String nick) {
        return clients.containsKey(nick);
    }

    public void subscribe(ClientHandler client) {
        clients.put(client.getNick(), client);
        broadcastClientsList();
    }

    public void unsubscribe(ClientHandler client) {
        clients.remove(client.getNick());
        broadcastClientsList();
    }

    public void sendMessageToClient(ClientHandler from, String nickTo, String msg) {
        final ClientHandler client = clients.get(nickTo);
        if (client != null) {
            client.sendMessage("от " + from.getNick() + ": " + msg);
            from.sendMessage("участнику " + nickTo + ": " + msg);
            return;
        }
        from.sendMessage("Участника с ником " + nickTo + " нет в чат-комнате");
    }

    public void broadcastClientsList() {
        StringBuilder clientsCommand = new StringBuilder("/clients ");
        for (ClientHandler client : clients.values()) {
            clientsCommand.append(client.getNick()).append(" ");
        }
        broadcast(clientsCommand.toString());
    }

    public void broadcast(String msg) {
        for (ClientHandler client : clients.values()) {
            client.sendMessage(msg);
        }
    }
}


******************************************************************************************


package ru.gb.server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

public class ClientHandler {
    private static final String COMMAND_PREFIX = "/";
    private static final String SEND_MESSAGE_TO_CLIENT_COMMAND = COMMAND_PREFIX + "w";
    private static final String END_COMMAND = COMMAND_PREFIX + "end";
    private final Socket socket;
    private final ChatServer server;
    private final DataInputStream in;
    private final DataOutputStream out;
    private String nick;
    private boolean isAuthClient = false;

    public ClientHandler(Socket socket, ChatServer server) {
        try {
            this.nick = "";
            this.socket = socket;
            this.server = server;
            this.in = new DataInputStream(socket.getInputStream());
            this.out = new DataOutputStream(socket.getOutputStream());
            final int timeout = 12 * 1000;

            Thread timer = new Thread(() -> {                                           // run timeout
             try {
                 Thread.sleep(timeout);
             }catch (InterruptedException e) {
                 e.printStackTrace();
             }
             try {
                 if (!isAuthClient) {
                     sendMessage("Time " + (timeout / 1000) + "second is over. This client disconnected from server!");
                     socket.close();
                     System.out.println("Timeout " + (timeout / 1000) + "second is over. Client disconnected from server!");
                 }
             }catch (IOException e) {
                 e.printStackTrace();
             }
            });
            timer.start();

            Thread auth = new Thread(() -> {
                try {
                    authenticate();
                    readMessages();
                } finally {
                    closeConnection();
                }
            });
            auth.start();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }

    private void closeConnection() {
        try {
            if (in != null) {
                in.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            if (out != null) {
                out.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            if (socket != null) {
                server.unsubscribe(this);
                socket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void authenticate() {
        while (true) {
            try {
                final String str = in.readUTF();
                if (str.startsWith("/auth")) {
                    final String[] split = str.split(" ");
                    final String login = split[1];
                    final String password = split[2];
                    final String nick = server.getAuthService().getNickByLoginAndPassword(login, password);
                    if (nick != null) {
                        if (server.isNickBusy(nick)) {
                            sendMessage("Пользователь уже авторизован");
                            continue;
                        }
                        sendMessage("/authok " + nick);
                        this.nick = nick;
                        server.broadcast("Пользователь " + nick + " зашел в чат");
                        server.subscribe(this);
                        isAuthClient = true;                            // timeout
                        break;
                    } else {
                        sendMessage("Неверные логин и пароль");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }

    public void sendMessage(String message) {
        try {
            System.out.println("SERVER: Send message to " + nick);
            out.writeUTF(message);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void readMessages() {
        try {
            while (true) {
                final String msg = in.readUTF();
                System.out.println("Receive message: " + msg);
                if (msg.startsWith(COMMAND_PREFIX)) {
                    if (END_COMMAND.equals(msg)) {
                        break;
                    }
                    if (msg.startsWith(SEND_MESSAGE_TO_CLIENT_COMMAND)) { // /w nick1 dkfjslkfj dskj
                        final String[] token = msg.split(" ");
                        final String nick = token[1];
                        server.sendMessageToClient(this, nick, msg.substring(SEND_MESSAGE_TO_CLIENT_COMMAND.length() + 2 + nick.length()));
                    }
                    continue;
                }
                server.broadcast(nick + ": " + msg);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String getNick() {
        return nick;
    }
}


******************************************************************************************************************************************************************